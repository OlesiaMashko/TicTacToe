/* 
 Assignment 04
 Course Codes/Lab: Database Programming using Java - ITC-5201-RNB
 Group 5
 Groupmember 1: Parth Antala - n01452392
 Groupmember 2: Olesia Mashkovtseva - n01454607
*/

package tictactoe;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

public class SecondMainform extends javax.swing.JFrame {

    /**
     * Creates new form Mainform
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public JButton btnBottomCenter;
    public JButton btnBottomLeft;
    public JButton btnBottomRight;
    public JButton btnCenterCenter;
    public JButton btnCenterLeft;
    public JButton btnCenterRight;
    public JButton btnTopCenter;
    public JButton btnTopLeft;
    public JButton btnTopRight;
    private JButton jButton2;
    private JButton jButton4;
    private JButton jButton6;
    private JButton jButton8;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public JButton[] buttons;

    private Socket socket = null; // if we do not initialize it then we get an exception later on
    public int playerMarker;
    //1 - cross
    //0 - zero


    // IO streams
    private DataOutputStream toServer;
    private DataInputStream fromServer;
    public int playerNo;
    public Boolean playersTurn = false;

    public SecondMainform() {
        initComponents();
        buttons = new JButton[]{btnTopLeft, btnTopCenter, btnTopRight, btnCenterLeft, btnCenterCenter, btnCenterRight, btnBottomLeft, btnBottomCenter, btnBottomRight};
        createPplayer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new JButton();
        jButton4 = new JButton();
        jButton6 = new JButton();
        jButton8 = new JButton();
        jPanel1 = new javax.swing.JPanel();
        btnTopCenter = new JButton();
        btnTopRight = new JButton();
        btnCenterLeft = new JButton();
        btnTopLeft = new JButton();
        btnCenterRight = new JButton();
        btnCenterCenter = new JButton();
        btnBottomLeft = new JButton();
        btnBottomCenter = new JButton();
        btnBottomRight = new JButton();

        jButton2.setText("jButton1");

        jButton4.setText("jButton1");

        jButton6.setText("jButton1");

        jButton8.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btnTopCenter.setName("btnTopCenter"); // NOI18N

        btnTopRight.setLabel("");
        btnTopRight.setName("btnTopRight"); // NOI18N

        btnCenterLeft.setLabel("");
        btnCenterLeft.setName("btnCenterLeft"); // NOI18N

        btnTopLeft.setName("btnTopLeft"); // NOI18N

        btnCenterRight.setLabel("");
        btnCenterRight.setName("btnCenterRight"); // NOI18N

        btnCenterCenter.setLabel("");
        btnCenterCenter.setName("btnCenterCenter"); // NOI18N

        btnBottomLeft.setLabel("");
        btnBottomLeft.setName("btnBottomLeft"); // NOI18N

        btnBottomCenter.setLabel("");
        btnBottomCenter.setName("btnBottomCenter"); // NOI18N

        btnBottomRight.setLabel("");
        btnBottomRight.setName("btnBottomRight"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnBottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnBottomCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnBottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(btnCenterLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnCenterCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnCenterRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(btnTopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnTopCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(btnTopRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnTopCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnTopRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnTopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCenterLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnCenterCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnCenterRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnBottomLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnBottomCenter, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnBottomRight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /* 
     * Create a second player 
     * */
    private void createPplayer() {
        try {
            socket = new Socket("localhost", 1234);
            System.out.println("Server is up now!\n");

            // Create an input stream to receive data from the server
            fromServer = new DataInputStream(socket.getInputStream());
            // Create an output stream to send data to the server
            toServer = new DataOutputStream(socket.getOutputStream());

            toServer.writeUTF("");
            playerNo = fromServer.readInt();

            //set player marker (cross or zero)
            if (playerNo == 1) {
                playerMarker = 0;
            } else {
                playerMarker = 1;
            }

            toServer.writeUTF("");
            playersTurn = fromServer.readInt() == playerNo;
            setTitle("Player" + playerNo);

            setActionListeners();

            HandleAServer task = new HandleAServer(socket, playerNo, this, playerMarker);
            new Thread(task).start();
        } catch (IOException ex) {
            System.out.println(ex.toString() + '\n');
        }
    }

    private void setActionListeners() {
        for (int i = 0; i < buttons.length; i++) {
            int column = i / 3;
            int row = i % 3;
            buttons[i].addActionListener(new OnButtonClickListener(column, row));
        }
    }

    private void showTurnDialog() {
        JOptionPane.showMessageDialog(this,
                "Your turn",
                "Player" + playerNo,
                JOptionPane.INFORMATION_MESSAGE,
                null);
    }

    private void showEndDialog(String msg) {
        JOptionPane.showMessageDialog(this,
                msg,
                "",
                JOptionPane.INFORMATION_MESSAGE,
                null);
        setVisible(false);
        dispose();
    }

    private void showInfoDialog(String msg) {
        JOptionPane.showMessageDialog(this,
                msg,
                "",
                JOptionPane.INFORMATION_MESSAGE,
                null);
    }

    private static boolean isDigit(String s) throws NumberFormatException {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    class HandleAServer implements Runnable {
        private Socket socket; // A connected socket
        public DataInputStream inputFromClient;
        public DataOutputStream outputToClient;
        public int playerNo;
        public SecondMainform form;
        public int playerMarker;

        public HandleAServer(Socket socket, int playerNo, SecondMainform form, int playerMarker) {
            this.playerMarker = playerMarker;
            this.form = form;
            this.socket = socket;
            this.playerNo = playerNo;
            try {
                // Create data input and output streams
                inputFromClient = new DataInputStream(
                        this.socket.getInputStream());
                outputToClient = new DataOutputStream(
                        this.socket.getOutputStream());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void run() {
            try {
                if (playersTurn) showTurnDialog();
                boolean showDialog = true;
                while (true) {
                    String serverResponse = inputFromClient.readUTF();
                    if (isDigit(serverResponse)) {
                        int column = Integer.parseInt(String.valueOf(serverResponse.charAt(0)));
                        int row = Integer.parseInt(String.valueOf(serverResponse.charAt(1)));
                        if (playerMarker == 0) {
                            form.buttons[column * 3 + row].setIcon(new ImageIcon(getClass().getResource("/resourses/ic_cross.png")));
                        } else {
                            form.buttons[column * 3 + row].setIcon(new ImageIcon(getClass().getResource("/resourses/ic_oval.png")));
                        }
                        //let the player make a move
                        playersTurn = true;
                        if (showDialog) showTurnDialog();
                    } else {
                        showDialog = false;
                        showEndDialog(serverResponse);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private class OnButtonClickListener implements ActionListener {

        private int column;
        private int row;

        public OnButtonClickListener(int column, int row) {
            this.column = column;
            this.row = row;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (!playersTurn) return;
            if (buttons[column * 3 + row].getIcon() != null) {
                showInfoDialog("You need to select an empty cell!");
                return;
            }
            try {
                //change the queue by blocking the selection of buttons
                playersTurn = false;
                String msg = String.valueOf(column) + row;
                if (playerMarker == 1) {
                    buttons[column * 3 + row].setIcon(new ImageIcon(getClass().getResource("/resourses/ic_cross.png")));
                } else {
                    buttons[column * 3 + row].setIcon(new ImageIcon(getClass().getResource("/resourses/ic_oval.png")));
                }
                toServer.writeUTF(msg);

            } catch (Exception ex) {
                System.err.println(ex);
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecondMainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecondMainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecondMainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecondMainform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SecondMainform().setVisible(true);
            }
        });
    }

}
